"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __importStar(require("vscode"));
const RazorCSharpFeature_1 = require("./CSharp/RazorCSharpFeature");
const DocumentTelemetryListener_1 = require("./DocumentTelemetryListener");
const RazorHtmlFeature_1 = require("./Html/RazorHtmlFeature");
const ProjectTelemetryListener_1 = require("./ProjectTelemetryListener");
const ProvisionalCompletionOrchestrator_1 = require("./ProvisionalCompletionOrchestrator");
const RazorCompletionItemProvider_1 = require("./RazorCompletionItemProvider");
const RazorDocumentManager_1 = require("./RazorDocumentManager");
const RazorDocumentSynchronizer_1 = require("./RazorDocumentSynchronizer");
const RazorDocumentTracker_1 = require("./RazorDocumentTracker");
const RazorLanguage_1 = require("./RazorLanguage");
const RazorLanguageConfiguration_1 = require("./RazorLanguageConfiguration");
const RazorLanguageServerClient_1 = require("./RazorLanguageServerClient");
const RazorLanguageServerOptionsResolver_1 = require("./RazorLanguageServerOptionsResolver");
const RazorLanguageServerTraceResolver_1 = require("./RazorLanguageServerTraceResolver");
const RazorLanguageServiceClient_1 = require("./RazorLanguageServiceClient");
const RazorLogger_1 = require("./RazorLogger");
const RazorProjectManager_1 = require("./RazorProjectManager");
const RazorProjectTracker_1 = require("./RazorProjectTracker");
const RazorSignatureHelpProvider_1 = require("./RazorSignatureHelpProvider");
const TelemetryReporter_1 = require("./TelemetryReporter");
function activate(context, languageServerDir, eventStream) {
    return __awaiter(this, void 0, void 0, function* () {
        const telemetryReporter = new TelemetryReporter_1.TelemetryReporter(eventStream);
        try {
            const languageServerTrace = RazorLanguageServerTraceResolver_1.resolveRazorLanguageServerTrace();
            const logger = new RazorLogger_1.RazorLogger(languageServerTrace);
            const languageServerOptions = RazorLanguageServerOptionsResolver_1.resolveRazorLanguageServerOptions(languageServerDir, languageServerTrace, logger);
            const languageServerClient = new RazorLanguageServerClient_1.RazorLanguageServerClient(languageServerOptions, telemetryReporter, logger);
            const languageServiceClient = new RazorLanguageServiceClient_1.RazorLanguageServiceClient(languageServerClient);
            const documentManager = new RazorDocumentManager_1.RazorDocumentManager(languageServerClient, logger);
            DocumentTelemetryListener_1.reportTelemetryForDocuments(documentManager, telemetryReporter);
            const projectManager = new RazorProjectManager_1.RazorProjectManager(logger);
            ProjectTelemetryListener_1.reportTelemetryForProjects(projectManager, telemetryReporter);
            const languageConfiguration = new RazorLanguageConfiguration_1.RazorLanguageConfiguration();
            const csharpFeature = new RazorCSharpFeature_1.RazorCSharpFeature(documentManager);
            const htmlFeature = new RazorHtmlFeature_1.RazorHtmlFeature(documentManager, languageServiceClient);
            const projectTracker = new RazorProjectTracker_1.RazorProjectTracker(projectManager, languageServiceClient);
            const documentTracker = new RazorDocumentTracker_1.RazorDocumentTracker(documentManager, languageServiceClient);
            const localRegistrations = [];
            const onStartRegistration = languageServerClient.onStart(() => {
                const documentSynchronizer = new RazorDocumentSynchronizer_1.RazorDocumentSynchronizer(documentManager, logger);
                const provisionalCompletionOrchestrator = new ProvisionalCompletionOrchestrator_1.ProvisionalCompletionOrchestrator(documentManager, csharpFeature.projectionProvider, languageServiceClient, logger);
                const completionItemProvider = new RazorCompletionItemProvider_1.RazorCompletionItemProvider(documentSynchronizer, documentManager, languageServiceClient, provisionalCompletionOrchestrator, logger);
                const signatureHelpProvider = new RazorSignatureHelpProvider_1.RazorSignatureHelpProvider(documentSynchronizer, documentManager, languageServiceClient);
                localRegistrations.push(languageConfiguration.register(), provisionalCompletionOrchestrator.register(), vscode.languages.registerCompletionItemProvider(RazorLanguage_1.RazorLanguage.id, completionItemProvider, '.', '<', '@'), vscode.languages.registerSignatureHelpProvider(RazorLanguage_1.RazorLanguage.id, signatureHelpProvider, '(', ','), projectTracker.register(), projectManager.register(), documentManager.register(), documentTracker.register(), csharpFeature.register(), htmlFeature.register(), documentSynchronizer.register());
            });
            const onStopRegistration = languageServerClient.onStop(() => {
                localRegistrations.forEach(r => r.dispose());
                localRegistrations.length = 0;
            });
            yield languageServerClient.start();
            yield projectManager.initialize();
            yield documentManager.initialize();
            context.subscriptions.push(languageServerClient, onStartRegistration, onStopRegistration, logger);
        }
        catch (error) {
            telemetryReporter.reportErrorOnActivation(error);
        }
    });
}
exports.activate = activate;
//# sourceMappingURL=extension.js.map