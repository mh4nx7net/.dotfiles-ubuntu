"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __importStar(require("vscode"));
const AddDocumentRequest_1 = require("./RPC/AddDocumentRequest");
const AddProjectRequest_1 = require("./RPC/AddProjectRequest");
const LanguageQueryRequest_1 = require("./RPC/LanguageQueryRequest");
const RazorTextDocumentItem_1 = require("./RPC/RazorTextDocumentItem");
const RemoveDocumentRequest_1 = require("./RPC/RemoveDocumentRequest");
const RemoveProjectRequest_1 = require("./RPC/RemoveProjectRequest");
class RazorLanguageServiceClient {
    constructor(serverClient) {
        this.serverClient = serverClient;
        serverClient.onStart(() => {
            // Once the server starts we need to attach to all of the request handlers
            serverClient.onRequest('getTextDocument', filePath => this.getTextDocument(filePath));
        });
    }
    addDocument(documentUri) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new AddDocumentRequest_1.AddDocumentRequest(documentUri.fsPath);
            yield this.serverClient.sendRequest('projects/addDocument', request);
        });
    }
    removeDocument(documentUri) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new RemoveDocumentRequest_1.RemoveDocumentRequest(documentUri.fsPath);
            yield this.serverClient.sendRequest('projects/removeDocument', request);
        });
    }
    addProject(projectFileUri) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new AddProjectRequest_1.AddProjectRequest(projectFileUri.fsPath);
            yield this.serverClient.sendRequest('projects/addProject', request);
        });
    }
    removeProject(projectFileUri) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new RemoveProjectRequest_1.RemoveProjectRequest(projectFileUri.fsPath);
            yield this.serverClient.sendRequest('projects/removeProject', request);
        });
    }
    updateProject(project) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                projectFilePath: project.uri.fsPath,
                tagHelpers: project.configuration ? project.configuration.tagHelpers : [],
                targetFramework: project.configuration ? project.configuration.targetFramework : undefined,
                configuration: project.configuration ? project.configuration.configuration : undefined,
            };
            yield this.serverClient.sendRequest('projects/updateProject', request);
        });
    }
    languageQuery(position, uri) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new LanguageQueryRequest_1.LanguageQueryRequest(position, uri);
            const response = yield this.serverClient.sendRequest('razor/languageQuery', request);
            response.position = new vscode.Position(response.position.line, response.position.character);
            return response;
        });
    }
    getTextDocument(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const clientUri = vscode.Uri.file(filePath);
            const document = yield vscode.workspace.openTextDocument(clientUri);
            return new RazorTextDocumentItem_1.RazorTextDocumentItem(document);
        });
    }
}
exports.RazorLanguageServiceClient = RazorLanguageServiceClient;
//# sourceMappingURL=RazorLanguageServiceClient.js.map