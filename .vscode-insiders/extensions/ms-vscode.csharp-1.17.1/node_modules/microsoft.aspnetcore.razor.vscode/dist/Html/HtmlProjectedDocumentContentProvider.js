"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __importStar(require("vscode"));
const RazorDocumentChangeKind_1 = require("../RazorDocumentChangeKind");
const UriPaths_1 = require("../UriPaths");
class HtmlProjectedDocumentContentProvider {
    constructor(documentManager) {
        this.documentManager = documentManager;
        this.onDidChangeEmitter = new vscode.EventEmitter();
        documentManager.onChange((event) => this.documentChanged(event));
    }
    get onDidChange() { return this.onDidChangeEmitter.event; }
    provideTextDocumentContent(uri) {
        const razorDocument = this.findRazorDocument(uri);
        if (!razorDocument) {
            vscode.window.showErrorMessage('For some reason the projected document isn\'t set.');
            return;
        }
        const content = `${razorDocument.htmlDocument.getContent()}
// ${razorDocument.htmlDocument.projectedDocumentSyncVersion}`;
        return content;
    }
    documentChanged(event) {
        if (event.kind === RazorDocumentChangeKind_1.RazorDocumentChangeKind.htmlChanged ||
            event.kind === RazorDocumentChangeKind_1.RazorDocumentChangeKind.opened) {
            this.onDidChangeEmitter.fire(event.document.htmlDocument.uri);
        }
    }
    findRazorDocument(uri) {
        const projectedPath = UriPaths_1.getUriPath(uri);
        return this.documentManager.documents.find(razorDocument => razorDocument.htmlDocument.path.localeCompare(projectedPath, undefined, { sensitivity: 'base' }) === 0);
    }
}
HtmlProjectedDocumentContentProvider.scheme = 'razor-html';
exports.HtmlProjectedDocumentContentProvider = HtmlProjectedDocumentContentProvider;
//# sourceMappingURL=HtmlProjectedDocumentContentProvider.js.map