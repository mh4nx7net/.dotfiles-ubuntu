"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const vscode = __importStar(require("vscode"));
const vscode_jsonrpc_1 = require("vscode-jsonrpc");
class RazorLogger {
    constructor(trace) {
        this.trace = trace;
        this.verboseEnabled = this.trace >= vscode_jsonrpc_1.Trace.Verbose;
        this.messageEnabled = this.trace >= vscode_jsonrpc_1.Trace.Messages;
        this.outputChannel = vscode.window.createOutputChannel('Razor Log');
        this.logRazorInformation();
    }
    logError(message) {
        // Always log errors
        const errorPrefixedMessage = `(Error) ${message}`;
        this.logWithmarker(errorPrefixedMessage);
    }
    logMessage(message) {
        if (this.messageEnabled) {
            this.logWithmarker(message);
        }
    }
    logVerbose(message) {
        if (this.verboseEnabled) {
            this.logWithmarker(message);
        }
    }
    dispose() {
        this.outputChannel.dispose();
    }
    logWithmarker(message) {
        const timeString = new Date().toLocaleTimeString();
        const markedMessage = `[Client - ${timeString}] ${message}`;
        this.log(markedMessage);
    }
    log(message) {
        this.outputChannel.appendLine(message);
    }
    logRazorInformation() {
        const packageJsonContents = readOwnPackageJson();
        this.log('--------------------------------------------------------------------------------');
        this.log(`Razor.VSCode version ${packageJsonContents.version}`);
        this.log('--------------------------------------------------------------------------------');
        this.log(`Razor's trace level is currently set to '${vscode_jsonrpc_1.Trace[this.trace]}'`);
        this.log(' - To log issues with the Razor experience in VSCode you can file issues ' +
            'at https://github.com/aspnet/Razor.VSCode');
        this.log(' - To change Razor\'s trace level set \'razor.trace\' to ' +
            '\'Off\', \'Messages\' or \'Verbose\' and then restart VSCode.');
        this.log('-----------------------------------------------------------------------' +
            '------------------------------------------------------');
        this.log('');
    }
}
exports.RazorLogger = RazorLogger;
function readOwnPackageJson() {
    const packageJsonPath = findInDirectoryOrAncestor(__dirname, 'package.json');
    return require(packageJsonPath);
}
function findInDirectoryOrAncestor(dir, filename) {
    while (true) {
        const candidate = path.join(dir, filename);
        if (fs.existsSync(candidate)) {
            return candidate;
        }
        const parentDir = path.dirname(dir);
        if (parentDir === dir) {
            throw new Error(`Could not find '${filename}' in or above '${dir}'.`);
        }
        dir = parentDir;
    }
}
//# sourceMappingURL=RazorLogger.js.map