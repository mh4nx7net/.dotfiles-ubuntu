"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __importStar(require("vscode"));
const CSharpProjectedDocument_1 = require("./CSharp/CSharpProjectedDocument");
const CSharpProjectedDocumentContentProvider_1 = require("./CSharp/CSharpProjectedDocumentContentProvider");
const HtmlProjectedDocument_1 = require("./Html/HtmlProjectedDocument");
const HtmlProjectedDocumentContentProvider_1 = require("./Html/HtmlProjectedDocumentContentProvider");
const UriPaths_1 = require("./UriPaths");
function createDocument(uri) {
    const csharpDocument = createProjectedCSharpDocument(uri);
    const htmlDocument = createProjectedHtmlDocument(uri);
    const path = UriPaths_1.getUriPath(uri);
    const document = {
        uri,
        path,
        csharpDocument,
        htmlDocument,
    };
    return document;
}
exports.createDocument = createDocument;
function createProjectedHtmlDocument(hostDocumentUri) {
    // Index.cshtml => Index.cshtml__virtual.html
    const projectedPath = `${hostDocumentUri.path}__virtual.html`;
    const projectedUri = vscode.Uri.parse(`${HtmlProjectedDocumentContentProvider_1.HtmlProjectedDocumentContentProvider.scheme}://${projectedPath}`);
    const projectedDocument = new HtmlProjectedDocument_1.HtmlProjectedDocument(projectedUri);
    return projectedDocument;
}
function createProjectedCSharpDocument(hostDocumentUri) {
    // Index.cshtml => Index.cshtml__virtual.cs
    const projectedPath = `${hostDocumentUri.path}__virtual.cs`;
    const projectedUri = vscode.Uri.parse(`${CSharpProjectedDocumentContentProvider_1.CSharpProjectedDocumentContentProvider.scheme}://${projectedPath}`);
    const projectedDocument = new CSharpProjectedDocument_1.CSharpProjectedDocument(projectedUri);
    return projectedDocument;
}
//# sourceMappingURL=RazorDocumentFactory.js.map