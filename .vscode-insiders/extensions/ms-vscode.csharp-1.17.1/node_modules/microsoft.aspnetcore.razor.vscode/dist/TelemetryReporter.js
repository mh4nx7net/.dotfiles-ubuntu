"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_jsonrpc_1 = require("vscode-jsonrpc");
const HostEventStream_1 = require("./HostEventStream");
class TelemetryReporter {
    constructor(eventStream) {
        this.eventStream = eventStream;
        this.razorDocuments = {};
        this.razorProjects = {};
        this.documentOpenedEvent = new HostEventStream_1.TelemetryEvent('VSCode.Razor.DocumentOpened');
        this.documentClosedEvent = new HostEventStream_1.TelemetryEvent('VSCode.Razor.DocumentClosed');
        this.documentEditedAfterOpenEvent = new HostEventStream_1.TelemetryEvent('VSCode.Razor.DocumentEditedAfterOpen');
        this.razorExtensionActivated = new HostEventStream_1.TelemetryEvent('VSCode.Razor.RazorExtensionActivated');
        this.debugLanguageServerEvent = new HostEventStream_1.TelemetryEvent('VSCode.Razor.DebugLanguageServer');
        this.workspaceContainsRazorEvent = new HostEventStream_1.TelemetryEvent('VSCode.Razor.WorkspaceContainsRazor');
        this.reportedWorkspaceContainsRazor = false;
        // If this telemetry reporter is created it means the rest of the Razor extension world was created.
        this.eventStream.post(this.razorExtensionActivated);
    }
    reportTraceLevel(trace) {
        const traceLevelEvent = new HostEventStream_1.TelemetryEvent('VSCode.Razor.TraceLevel', {
            trace: vscode_jsonrpc_1.Trace[trace],
        });
        this.eventStream.post(traceLevelEvent);
    }
    reportErrorOnServerStart(error) {
        this.reportError('VSCode.Razor.ErrorOnServerStart', error);
    }
    reportErrorOnActivation(error) {
        this.reportError('VSCode.Razor.ErrorOnActivation', error);
    }
    reportProjectInfo(project) {
        const projectConfiguration = project.configuration;
        if (!projectConfiguration) {
            // A project.razor.json file hasn't been created for the project yet.
            return;
        }
        let configurationName;
        let languageVersion;
        if (projectConfiguration.configuration) {
            configurationName = projectConfiguration.configuration.ConfigurationName;
            languageVersion = projectConfiguration.configuration.LanguageVersion;
        }
        else {
            configurationName = 'Default';
            languageVersion = 'Default';
        }
        const targetFramework = projectConfiguration.targetFramework;
        const projectIdentifier = this.razorProjects[project.path];
        const newIdentifier = `${configurationName},${languageVersion},${targetFramework}`;
        if (projectIdentifier === newIdentifier) {
            // We've already reported this project data.
            return;
        }
        else {
            this.razorProjects[project.path] = newIdentifier;
        }
        const projectInfoEvent = new HostEventStream_1.TelemetryEvent('VSCode.Razor.ProjectInfo', {
            path: project.path,
            configurationName,
            targetFramework,
            languageVersion,
        });
        this.eventStream.post(projectInfoEvent);
    }
    reportDebugLanguageServer() {
        this.eventStream.post(this.debugLanguageServerEvent);
    }
    reportWorkspaceContainsRazor() {
        if (this.reportedWorkspaceContainsRazor) {
            return;
        }
        this.reportedWorkspaceContainsRazor = true;
        this.eventStream.post(this.workspaceContainsRazorEvent);
    }
    reportDocumentOpened(path) {
        this.eventStream.post(this.documentOpenedEvent);
    }
    reportDocumentClosed(path) {
        delete this.razorDocuments[path];
        this.eventStream.post(this.documentClosedEvent);
    }
    reportDocumentEdited(path) {
        if (this.razorDocuments[path] === undefined) {
            this.razorDocuments[path] = true;
            // Only report the first edit to a document when its opened.
            this.eventStream.post(this.documentEditedAfterOpenEvent);
        }
    }
    reportError(eventName, error) {
        const errorOnActivationEvent = new HostEventStream_1.TelemetryEvent(eventName, {
            error: JSON.stringify(error),
        });
        this.eventStream.post(errorOnActivationEvent);
    }
}
exports.TelemetryReporter = TelemetryReporter;
//# sourceMappingURL=TelemetryReporter.js.map