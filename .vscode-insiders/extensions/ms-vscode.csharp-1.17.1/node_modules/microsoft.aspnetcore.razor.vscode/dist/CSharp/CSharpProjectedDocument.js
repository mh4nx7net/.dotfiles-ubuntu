"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
const UriPaths_1 = require("../UriPaths");
class CSharpProjectedDocument {
    constructor(uri) {
        this.uri = uri;
        this.content = '';
        this.hostDocumentVersion = null;
        this.projectedDocumentVersion = 0;
        this.path = UriPaths_1.getUriPath(uri);
    }
    get hostDocumentSyncVersion() {
        return this.hostDocumentVersion;
    }
    get projectedDocumentSyncVersion() {
        return this.projectedDocumentVersion;
    }
    update(edits, hostDocumentVersion) {
        this.removeProvisionalDot();
        this.hostDocumentVersion = hostDocumentVersion;
        if (edits.length === 0) {
            return;
        }
        let content = this.content;
        for (const edit of edits) {
            // TODO: Use a better data structure to represent the content, string concats
            // are slow.
            content = this.getEditedContent(edit.newText, edit.span.start, edit.span.end, content);
        }
        this.setContent(content);
    }
    getContent() {
        return this.content;
    }
    // A provisional dot represents a '.' that's inserted into the projected document but will be
    // removed prior to any edits that get applied. In Razor's case a provisional dot is used to
    // show completions after an expression for a dot that's usually interpreted as Html.
    addProvisionalDotAt(index) {
        if (this.provisionalEditAt === index) {
            // Edits already applied.
            return;
        }
        this.removeProvisionalDot();
        const newContent = this.getEditedContent('.', index, index, this.content);
        this.preProvisionalContent = this.content;
        this.provisionalEditAt = index;
        this.setContent(newContent);
    }
    removeProvisionalDot() {
        if (this.provisionalEditAt && this.preProvisionalContent) {
            // Undo provisional edit if one was applied.
            this.setContent(this.preProvisionalContent);
            this.provisionalEditAt = undefined;
            this.preProvisionalContent = undefined;
            return true;
        }
        return false;
    }
    getEditedContent(newText, start, end, content) {
        const before = content.substr(0, start);
        const after = content.substr(end);
        content = `${before}${newText}${after}`;
        return content;
    }
    setContent(content) {
        this.projectedDocumentVersion++;
        this.content = content;
    }
}
exports.CSharpProjectedDocument = CSharpProjectedDocument;
//# sourceMappingURL=CSharpProjectedDocument.js.map