"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __importStar(require("vscode"));
const RazorDocumentChangeKind_1 = require("../RazorDocumentChangeKind");
const UriPaths_1 = require("../UriPaths");
class CSharpProjectedDocumentContentProvider {
    constructor(documentManager) {
        this.documentManager = documentManager;
        this.onDidChangeEmitter = new vscode.EventEmitter();
        documentManager.onChange((event) => this.documentChanged(event));
    }
    get onDidChange() { return this.onDidChangeEmitter.event; }
    provideTextDocumentContent(uri) {
        return __awaiter(this, void 0, void 0, function* () {
            const razorDocument = this.findRazorDocument(uri);
            if (!razorDocument) {
                vscode.window.showErrorMessage('For some reason the projected document isn\'t available.');
                return;
            }
            const content = `${razorDocument.csharpDocument.getContent()}
// ${razorDocument.csharpDocument.projectedDocumentSyncVersion}`;
            return content;
        });
    }
    ensureDocumentContent(uri) {
        this.onDidChangeEmitter.fire(uri);
    }
    documentChanged(event) {
        if (event.kind === RazorDocumentChangeKind_1.RazorDocumentChangeKind.csharpChanged ||
            event.kind === RazorDocumentChangeKind_1.RazorDocumentChangeKind.opened) {
            this.onDidChangeEmitter.fire(event.document.csharpDocument.uri);
        }
    }
    findRazorDocument(uri) {
        const projectedPath = UriPaths_1.getUriPath(uri);
        return this.documentManager.documents.find(razorDocument => razorDocument.csharpDocument.path.localeCompare(projectedPath, undefined, { sensitivity: 'base' }) === 0);
    }
}
CSharpProjectedDocumentContentProvider.scheme = 'virtualCSharp-razor';
exports.CSharpProjectedDocumentContentProvider = CSharpProjectedDocumentContentProvider;
//# sourceMappingURL=CSharpProjectedDocumentContentProvider.js.map