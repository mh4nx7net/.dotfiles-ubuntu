"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __importStar(require("vscode"));
const RazorDocumentChangeKind_1 = require("../RazorDocumentChangeKind");
const CSharpProjectedDocumentContentProvider_1 = require("./CSharpProjectedDocumentContentProvider");
class CSharpPreviewDocumentContentProvider {
    constructor(documentManager) {
        this.documentManager = documentManager;
        this.onDidChangeEmitter = new vscode.EventEmitter();
        documentManager.onChange((event) => this.documentChanged(event));
    }
    get onDidChange() { return this.onDidChangeEmitter.event; }
    provideTextDocumentContent() {
        return __awaiter(this, void 0, void 0, function* () {
            const document = yield this.documentManager.getActiveDocument();
            if (!document) {
                return '';
            }
            const content = document.csharpDocument.getContent();
            return `
            <body>
                <p>For host document: <strong>${document.path}</strong></p>
                <hr />
                <pre>${content}</pre>
                <hr />
            </body>`;
        });
    }
    showRazorCSharpWindow() {
        return __awaiter(this, void 0, void 0, function* () {
            const document = yield this.documentManager.getActiveDocument();
            if (!document) {
                vscode.window.showErrorMessage('No active text editor.');
                return;
            }
            try {
                yield vscode.commands.executeCommand('vscode.previewHtml', CSharpPreviewDocumentContentProvider.previewUri, vscode.ViewColumn.Two, 'Razor CSharp Output');
            }
            catch (error) {
                vscode.window.showErrorMessage(error);
            }
        });
    }
    documentChanged(event) {
        return __awaiter(this, void 0, void 0, function* () {
            if (event.kind === RazorDocumentChangeKind_1.RazorDocumentChangeKind.csharpChanged) {
                const document = yield this.documentManager.getActiveDocument();
                if (document === event.document) {
                    this.onDidChangeEmitter.fire(CSharpPreviewDocumentContentProvider.previewUri);
                }
            }
            else if (event.kind === RazorDocumentChangeKind_1.RazorDocumentChangeKind.opened ||
                event.kind === RazorDocumentChangeKind_1.RazorDocumentChangeKind.closed) {
                // Force refresh on the preview when a Razor document opens/closes.
                this.onDidChangeEmitter.fire(CSharpPreviewDocumentContentProvider.previewUri);
            }
        });
    }
}
CSharpPreviewDocumentContentProvider.scheme = `${CSharpProjectedDocumentContentProvider_1.CSharpProjectedDocumentContentProvider.scheme}-preview`;
CSharpPreviewDocumentContentProvider.previewUri = vscode.Uri.parse(`${CSharpPreviewDocumentContentProvider.scheme}://razor/csharppreview`);
exports.CSharpPreviewDocumentContentProvider = CSharpPreviewDocumentContentProvider;
//# sourceMappingURL=CSharpPreviewDocumentContentProvider.js.map