"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __importStar(require("vscode"));
const CSharpPreviewDocumentContentProvider_1 = require("./CSharpPreviewDocumentContentProvider");
const CSharpProjectedDocumentContentProvider_1 = require("./CSharpProjectedDocumentContentProvider");
class RazorCSharpFeature {
    constructor(documentManager) {
        this.projectionProvider = new CSharpProjectedDocumentContentProvider_1.CSharpProjectedDocumentContentProvider(documentManager);
        this.previewProvider = new CSharpPreviewDocumentContentProvider_1.CSharpPreviewDocumentContentProvider(documentManager);
    }
    register() {
        const registrations = [
            vscode.workspace.registerTextDocumentContentProvider(CSharpProjectedDocumentContentProvider_1.CSharpProjectedDocumentContentProvider.scheme, this.projectionProvider),
            vscode.workspace.registerTextDocumentContentProvider(CSharpPreviewDocumentContentProvider_1.CSharpPreviewDocumentContentProvider.scheme, this.previewProvider),
            vscode.commands.registerCommand('extension.showRazorCSharpWindow', () => this.previewProvider.showRazorCSharpWindow()),
        ];
        return vscode.Disposable.from(...registrations);
    }
}
exports.RazorCSharpFeature = RazorCSharpFeature;
//# sourceMappingURL=RazorCSharpFeature.js.map