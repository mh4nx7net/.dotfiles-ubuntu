"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const LanguageKind_1 = require("./RPC/LanguageKind");
class RazorLanguageFeatureBase {
    constructor(documentSynchronizer, documentManager, serviceClient) {
        this.documentSynchronizer = documentSynchronizer;
        this.documentManager = documentManager;
        this.serviceClient = serviceClient;
    }
    getProjection(document, position, token) {
        return __awaiter(this, void 0, void 0, function* () {
            const languageResponse = yield this.serviceClient.languageQuery(position, document.uri);
            switch (languageResponse.kind) {
                case LanguageKind_1.LanguageKind.CSharp:
                case LanguageKind_1.LanguageKind.Html:
                    const razorDocument = yield this.documentManager.getDocument(document.uri);
                    const projectedDocument = languageResponse.kind === LanguageKind_1.LanguageKind.CSharp
                        ? razorDocument.csharpDocument
                        : razorDocument.htmlDocument;
                    const synchronized = yield this.documentSynchronizer.trySynchronizeProjectedDocument(document, projectedDocument, languageResponse.hostDocumentVersion, token);
                    if (!synchronized) {
                        // Could not synchronize
                        return null;
                    }
                    const projectedUri = projectedDocument.uri;
                    return {
                        uri: projectedUri,
                        position: languageResponse.position,
                        languageKind: languageResponse.kind,
                    };
                default:
                    return null;
            }
        });
    }
}
exports.RazorLanguageFeatureBase = RazorLanguageFeatureBase;
//# sourceMappingURL=RazorLanguageFeatureBase.js.map