"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const RazorLanguage_1 = require("./RazorLanguage");
function resolveRazorLanguageServerOptions(languageServerDir, trace, logger) {
    const languageServerExecutablePath = findLanguageServerExecutable(languageServerDir);
    const debugLanguageServer = RazorLanguage_1.RazorLanguage.serverConfig.get('debug');
    return {
        serverPath: languageServerExecutablePath,
        debug: debugLanguageServer,
        trace,
        outputChannel: logger.outputChannel,
    };
}
exports.resolveRazorLanguageServerOptions = resolveRazorLanguageServerOptions;
function findLanguageServerExecutable(withinDir) {
    const extension = isWindows() ? '.exe' : '';
    const executablePath = path.join(withinDir, `rzls${extension}`);
    let fullPath = '';
    if (fs.existsSync(executablePath)) {
        fullPath = executablePath;
    }
    else {
        // Exe doesn't exist.
        const dllPath = path.join(withinDir, 'rzls.dll');
        if (!fs.existsSync(dllPath)) {
            throw new Error(`Could not find Razor Language Server executable within directory '${withinDir}'`);
        }
        fullPath = dllPath;
    }
    return fullPath;
}
function isWindows() {
    return !!os.platform().match(/^win/);
}
//# sourceMappingURL=RazorLanguageServerOptionsResolver.js.map