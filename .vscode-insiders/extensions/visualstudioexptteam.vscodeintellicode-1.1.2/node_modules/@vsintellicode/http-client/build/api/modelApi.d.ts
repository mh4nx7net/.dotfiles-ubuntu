/// <reference types="node" />
import http = require('http');
import { ModelCodebaseCreateRequest } from '../model/modelCodebaseCreateRequest';
import { ModelCodebaseResponse } from '../model/modelCodebaseResponse';
import { ModelCreateRequest } from '../model/modelCreateRequest';
import { ModelInputCreateRequest } from '../model/modelInputCreateRequest';
import { ModelInputDetailsResponse } from '../model/modelInputDetailsResponse';
import { ModelOutputDetailsResponse } from '../model/modelOutputDetailsResponse';
import { ModelOutputTrainingDetails } from '../model/modelOutputTrainingDetails';
import { ModelResponse } from '../model/modelResponse';
import { Authentication, ApiKeyAuth } from '../model/models';
export declare enum ModelApiApiKeys {
    Bearer = 0
}
export declare class ModelApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'Bearer': ApiKeyAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ModelApiApiKeys, value: string): void;
    apiV1ModelByModelIdCodebasePost(modelId: string, modelCodebaseCreateRequest?: ModelCodebaseCreateRequest): Promise<{
        response: http.IncomingMessage;
        body: ModelCodebaseResponse;
    }>;
    apiV1ModelByModelIdDelete(modelId: string): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV1ModelByModelIdGet(modelId: string): Promise<{
        response: http.IncomingMessage;
        body: ModelResponse;
    }>;
    apiV1ModelByModelIdInputByInputIdActionNotifyDatauploadcompletePut(modelId: string, inputId: string): Promise<{
        response: http.IncomingMessage;
        body: ModelOutputDetailsResponse;
    }>;
    apiV1ModelByModelIdInputByInputIdGet(modelId: string, inputId: string): Promise<{
        response: http.IncomingMessage;
        body: ModelInputDetailsResponse;
    }>;
    apiV1ModelByModelIdInputPost(modelId: string, modelInputCreateRequest?: ModelInputCreateRequest): Promise<{
        response: http.IncomingMessage;
        body: ModelInputDetailsResponse;
    }>;
    apiV1ModelByModelIdOutputByOutputIdActionNotifyDatauploadcompletePut(modelId: string, outputId: string, modelOutputTrainingDetails?: ModelOutputTrainingDetails): Promise<{
        response: http.IncomingMessage;
        body: ModelOutputDetailsResponse;
    }>;
    apiV1ModelByModelIdOutputByOutputIdGet(modelId: string, outputId: string): Promise<{
        response: http.IncomingMessage;
        body: ModelOutputDetailsResponse;
    }>;
    apiV1ModelByModelIdOutputLatestGet(modelId: string): Promise<{
        response: http.IncomingMessage;
        body: ModelOutputDetailsResponse;
    }>;
    apiV1ModelByModelIdTrainPost(modelId: string): Promise<{
        response: http.IncomingMessage;
        body: ModelOutputDetailsResponse;
    }>;
    apiV1ModelCommonByLanguageByAnalyzerOutputLatestGet(language: string, analyzer: string): Promise<{
        response: http.IncomingMessage;
        body: ModelOutputDetailsResponse;
    }>;
    apiV1ModelPost(modelCreateRequest?: ModelCreateRequest): Promise<{
        response: http.IncomingMessage;
        body: ModelResponse;
    }>;
}
